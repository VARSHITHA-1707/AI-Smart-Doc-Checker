import jsPDF from "jspdf"
import type { AnalysisResult, Contradiction, Inconsistency } from "@/lib/ai/gemini-client"

export interface ReportData {
  documentName: string
  analysisDate: string
  analysisType: string
  results: AnalysisResult
  userEmail: string
}

export function generatePDFReport(reportData: ReportData): Buffer {
  const doc = new jsPDF()
  let yPosition = 20

  // Helper function to add text with word wrapping
  const addText = (text: string, x: number, y: number, maxWidth = 170): number => {
    const lines = doc.splitTextToSize(text, maxWidth)
    doc.text(lines, x, y)
    return y + lines.length * 7
  }

  // Helper function to add section header
  const addSectionHeader = (title: string, y: number): number => {
    doc.setFontSize(14)
    doc.setFont("helvetica", "bold")
    doc.text(title, 20, y)
    doc.setFontSize(10)
    doc.setFont("helvetica", "normal")
    return y + 10
  }

  // Title
  doc.setFontSize(20)
  doc.setFont("helvetica", "bold")
  doc.text("Smart Doc Checker Analysis Report", 20, yPosition)
  yPosition += 15

  // Document info
  doc.setFontSize(12)
  doc.setFont("helvetica", "normal")
  yPosition = addText(`Document: ${reportData.documentName}`, 20, yPosition)
  yPosition = addText(`Analysis Date: ${reportData.analysisDate}`, 20, yPosition)
  yPosition = addText(`Analysis Type: ${reportData.analysisType}`, 20, yPosition)
  yPosition = addText(`Generated for: ${reportData.userEmail}`, 20, yPosition)
  yPosition += 10

  // Summary section
  yPosition = addSectionHeader("Executive Summary", yPosition)
  yPosition = addText(reportData.results.summary, 20, yPosition)
  yPosition += 5

  // Statistics
  const contradictionsCount = reportData.results.contradictions?.length || 0
  const inconsistenciesCount = reportData.results.inconsistencies?.length || 0
  const confidenceScore = Math.round((reportData.results.confidence_score || 0) * 100)

  yPosition = addText(`• Contradictions Found: ${contradictionsCount}`, 20, yPosition)
  yPosition = addText(`• Inconsistencies Found: ${inconsistenciesCount}`, 20, yPosition)
  yPosition = addText(`• Overall Confidence Score: ${confidenceScore}%`, 20, yPosition)
  yPosition += 10

  // Check if we need a new page
  if (yPosition > 250) {
    doc.addPage()
    yPosition = 20
  }

  // Contradictions section
  if (contradictionsCount > 0) {
    yPosition = addSectionHeader("Contradictions", yPosition)

    reportData.results.contradictions?.forEach((contradiction: Contradiction, index: number) => {
      // Check if we need a new page
      if (yPosition > 220) {
        doc.addPage()
        yPosition = 20
      }

      doc.setFont("helvetica", "bold")
      yPosition = addText(`${index + 1}. Contradiction (${contradiction.severity} severity)`, 20, yPosition)
      doc.setFont("helvetica", "normal")

      yPosition = addText(`Statement 1: "${contradiction.statement1}"`, 25, yPosition)
      yPosition = addText(`Location: ${contradiction.location1}`, 25, yPosition)
      yPosition += 3

      yPosition = addText(`Statement 2: "${contradiction.statement2}"`, 25, yPosition)
      yPosition = addText(`Location: ${contradiction.location2}`, 25, yPosition)
      yPosition += 3

      yPosition = addText(`Explanation: ${contradiction.explanation}`, 25, yPosition)
      yPosition = addText(`Confidence: ${Math.round(contradiction.confidence * 100)}%`, 25, yPosition)
      yPosition += 8
    })
  }

  // Inconsistencies section
  if (inconsistenciesCount > 0) {
    // Check if we need a new page
    if (yPosition > 200) {
      doc.addPage()
      yPosition = 20
    }

    yPosition = addSectionHeader("Inconsistencies", yPosition)

    reportData.results.inconsistencies?.forEach((inconsistency: Inconsistency, index: number) => {
      // Check if we need a new page
      if (yPosition > 230) {
        doc.addPage()
        yPosition = 20
      }

      doc.setFont("helvetica", "bold")
      yPosition = addText(
        `${index + 1}. ${inconsistency.type} Inconsistency (${inconsistency.severity} severity)`,
        20,
        yPosition,
      )
      doc.setFont("helvetica", "normal")

      yPosition = addText(`Issue: ${inconsistency.issue}`, 25, yPosition)
      yPosition = addText(`Location: ${inconsistency.location}`, 25, yPosition)
      yPosition = addText(`Suggestion: ${inconsistency.suggestion}`, 25, yPosition)
      yPosition += 8
    })
  }

  // Footer
  const pageCount = doc.getNumberOfPages()
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i)
    doc.setFontSize(8)
    doc.setFont("helvetica", "normal")
    doc.text(`Generated by Smart Doc Checker - Page ${i} of ${pageCount}`, 20, 285)
    doc.text(`Report ID: ${Date.now()}`, 150, 285)
  }

  return Buffer.from(doc.output("arraybuffer"))
}

export function generateJSONReport(reportData: ReportData): string {
  const jsonReport = {
    metadata: {
      documentName: reportData.documentName,
      analysisDate: reportData.analysisDate,
      analysisType: reportData.analysisType,
      userEmail: reportData.userEmail,
      reportId: Date.now().toString(),
      generatedAt: new Date().toISOString(),
    },
    summary: {
      contradictionsCount: reportData.results.contradictions?.length || 0,
      inconsistenciesCount: reportData.results.inconsistencies?.length || 0,
      confidenceScore: reportData.results.confidence_score,
      overallSummary: reportData.results.summary,
      processingTimeMs: reportData.results.processing_time_ms,
    },
    findings: {
      contradictions: reportData.results.contradictions || [],
      inconsistencies: reportData.results.inconsistencies || [],
    },
  }

  return JSON.stringify(jsonReport, null, 2)
}

export function generateHTMLReport(reportData: ReportData): string {
  const contradictionsCount = reportData.results.contradictions?.length || 0
  const inconsistenciesCount = reportData.results.inconsistencies?.length || 0
  const confidenceScore = Math.round((reportData.results.confidence_score || 0) * 100)

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "high":
        return "#dc2626"
      case "medium":
        return "#ea580c"
      case "low":
        return "#65a30d"
      default:
        return "#6b7280"
    }
  }

  const contradictionsHTML =
    contradictionsCount > 0
      ? reportData.results.contradictions
          ?.map(
            (contradiction: Contradiction, index: number) => `
        <div class="finding-card">
          <div class="finding-header">
            <h3>Contradiction ${index + 1}</h3>
            <span class="severity-badge" style="background-color: ${getSeverityColor(contradiction.severity)}">
              ${contradiction.severity} severity
            </span>
          </div>
          <div class="statement">
            <h4>Statement 1:</h4>
            <blockquote>"${contradiction.statement1}"</blockquote>
            <p class="location">Location: ${contradiction.location1}</p>
          </div>
          <div class="statement">
            <h4>Statement 2:</h4>
            <blockquote>"${contradiction.statement2}"</blockquote>
            <p class="location">Location: ${contradiction.location2}</p>
          </div>
          <div class="explanation">
            <h4>Explanation:</h4>
            <p>${contradiction.explanation}</p>
          </div>
          <div class="confidence">
            <strong>Confidence: ${Math.round(contradiction.confidence * 100)}%</strong>
          </div>
        </div>
      `,
          )
          .join("")
      : '<div class="no-findings">No contradictions found in the document.</div>'

  const inconsistenciesHTML =
    inconsistenciesCount > 0
      ? reportData.results.inconsistencies
          ?.map(
            (inconsistency: Inconsistency, index: number) => `
        <div class="finding-card">
          <div class="finding-header">
            <h3>${inconsistency.type} Inconsistency ${index + 1}</h3>
            <span class="severity-badge" style="background-color: ${getSeverityColor(inconsistency.severity)}">
              ${inconsistency.severity} severity
            </span>
          </div>
          <div class="issue">
            <h4>Issue:</h4>
            <p>${inconsistency.issue}</p>
            <p class="location">Location: ${inconsistency.location}</p>
          </div>
          <div class="suggestion">
            <h4>Suggestion:</h4>
            <p>${inconsistency.suggestion}</p>
          </div>
        </div>
      `,
          )
          .join("")
      : '<div class="no-findings">No inconsistencies found in the document.</div>'

  return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Doc Checker Analysis Report</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f9fafb;
        }
        .header {
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        .header h1 {
            color: #1f2937;
            margin: 0 0 20px 0;
            font-size: 28px;
        }
        .document-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        .info-item {
            background: #f3f4f6;
            padding: 10px 15px;
            border-radius: 6px;
        }
        .info-label {
            font-weight: 600;
            color: #374151;
        }
        .summary {
            background: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .stat-card {
            text-align: center;
            padding: 20px;
            background: #f9fafb;
            border-radius: 6px;
        }
        .stat-number {
            font-size: 32px;
            font-weight: bold;
            margin-bottom: 5px;
        }
        .stat-label {
            color: #6b7280;
            font-size: 14px;
        }
        .section {
            background: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        .section h2 {
            color: #1f2937;
            margin-top: 0;
            padding-bottom: 10px;
            border-bottom: 2px solid #e5e7eb;
        }
        .finding-card {
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            padding: 20px;
            margin-bottom: 20px;
            background: #fafafa;
        }
        .finding-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 15px;
        }
        .finding-header h3 {
            margin: 0;
            color: #1f2937;
        }
        .severity-badge {
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }
        .statement, .issue, .suggestion, .explanation {
            margin-bottom: 15px;
        }
        .statement h4, .issue h4, .suggestion h4, .explanation h4 {
            margin: 0 0 8px 0;
            color: #374151;
            font-size: 14px;
            font-weight: 600;
        }
        blockquote {
            background: #fef2f2;
            border-left: 4px solid #ef4444;
            margin: 0;
            padding: 10px 15px;
            font-style: italic;
        }
        .location {
            font-size: 12px;
            color: #6b7280;
            margin-top: 5px;
        }
        .confidence {
            text-align: right;
            color: #059669;
            font-size: 14px;
        }
        .no-findings {
            text-align: center;
            padding: 40px;
            color: #6b7280;
            font-style: italic;
        }
        .footer {
            text-align: center;
            padding: 20px;
            color: #6b7280;
            font-size: 12px;
            border-top: 1px solid #e5e7eb;
            margin-top: 40px;
        }
        @media print {
            body { background: white; }
            .header, .summary, .section { box-shadow: none; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Smart Doc Checker Analysis Report</h1>
        <div class="document-info">
            <div class="info-item">
                <div class="info-label">Document:</div>
                <div>${reportData.documentName}</div>
            </div>
            <div class="info-item">
                <div class="info-label">Analysis Date:</div>
                <div>${reportData.analysisDate}</div>
            </div>
            <div class="info-item">
                <div class="info-label">Analysis Type:</div>
                <div>${reportData.analysisType}</div>
            </div>
            <div class="info-item">
                <div class="info-label">Generated For:</div>
                <div>${reportData.userEmail}</div>
            </div>
        </div>
    </div>

    <div class="summary">
        <h2>Executive Summary</h2>
        <p>${reportData.results.summary}</p>
        <div class="stats">
            <div class="stat-card">
                <div class="stat-number" style="color: #dc2626">${contradictionsCount}</div>
                <div class="stat-label">Contradictions</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" style="color: #ea580c">${inconsistenciesCount}</div>
                <div class="stat-label">Inconsistencies</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" style="color: #059669">${confidenceScore}%</div>
                <div class="stat-label">Confidence Score</div>
            </div>
        </div>
    </div>

    <div class="section">
        <h2>Contradictions (${contradictionsCount})</h2>
        ${contradictionsHTML}
    </div>

    <div class="section">
        <h2>Inconsistencies (${inconsistenciesCount})</h2>
        ${inconsistenciesHTML}
    </div>

    <div class="footer">
        <p>Generated by Smart Doc Checker | Report ID: ${Date.now()} | ${new Date().toLocaleString()}</p>
    </div>
</body>
</html>
  `
}
